{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2015,
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint", "deprecation"],
  "env": {
    "browser": true,
    "node": true,
    "es6": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "prettier/@typescript-eslint",
    "plugin:prettier/recommended",
    "prettier/@typescript-eslint",
    "prettier/react",
    "prettier"
  ],
  "rules": {
    "linebreak-style": ["error", "unix"],
    "no-cond-assign": "error",
    "capitalized-comments": [
      "error",
      "always",
      {
        "ignoreInlineComments": true,
        "ignoreConsecutiveComments": true
      }
    ],
    "spaced-comment": "error",
    "no-eval": "error",
    "no-trailing-spaces": "error",
    "no-unsafe-finally": "error",
    "no-var": "error",
    "quotes": ["error", "double"],
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ],
    "id-blacklist": "error",
    "no-underscore-dangle": "error",
    "require-atomic-updates": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "varsIgnorePattern": ""
      }
    ],
    "@typescript-eslint/indent": ["error", 2],
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/prefer-namespace-keyword": "error",
    "semi": "off",
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/type-annotation-spacing": ["error"],
    "camelcase": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": true
        }
      },
      {
        "selector": "enumMember",
        "format": ["PascalCase", "UPPER_CASE"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
      },
      {
        "selector": "parameter",
        "format": ["camelCase"],
        "leadingUnderscore": "forbid"
      },
      {
        "selector": "property",
        "format": ["PascalCase", "camelCase", "UPPER_CASE"],
        "leadingUnderscore": "forbid"
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["PascalCase", "camelCase"],
        "leadingUnderscore": "forbid"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      }
    ],
    "@typescript-eslint/no-use-before-define": [
      "error",
      {
        "functions": false,
        "classes": false,
        "variables": true
      }
    ],
    // Disabled for now to simplify migration to eslint
    "@typescript-eslint/no-var-requires": "warn",
    // Disabled checksVoidReturn for now to simplify migration to eslint
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": false
      }
    ],
    // Disabled for now to simplify migration to eslint
    "@typescript-eslint/unbound-method": "warn",
    // Disabled for now to simplify migration to eslint
    "@typescript-eslint/no-empty-interface": "warn",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    // Deactivated for now since we use {} a lot as return types
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-member-access": "warn",
    "@typescript-eslint/no-unsafe-call": "warn",
    "@typescript-eslint/no-unsafe-return": "warn",
    "react/jsx-no-target-blank": "error",
    "react/jsx-key": "error",
    "react/no-direct-mutation-state": "error",
    // Disable react/jsx-uses-react and react/react-in-jsx-scope because they are no longer relevant with the new JSX transform
    // See https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "@typescript-eslint/triple-slash-reference": "off",
    "@typescript-eslint/explicit-function-return-type": [
      "error",
      {
        "allowExpressions": true
      }
    ],
    "deprecation/deprecation": "warn"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
